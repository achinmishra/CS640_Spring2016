package edu.wisc.cs.sdn.vnet.rt;

import java.nio.ByteBuffer;

import edu.wisc.cs.sdn.vnet.Device;
import edu.wisc.cs.sdn.vnet.DumpFile;
import edu.wisc.cs.sdn.vnet.Iface;

import net.floodlightcontroller.packet.Ethernet;
import net.floodlightcontroller.packet.IPv4;

/**
 * @author Aaron Gember-Jacobson and Anubhavnidhi Abhashkumar
 */
public class Router extends Device
{	
	/** Routing table for the router */
	private RouteTable routeTable;
	
	/** ARP cache for the router */
	private ArpCache arpCache;
	
	/**
	 * Creates a router for a specific host.
	 * @param host hostname for the router
	 */
	public Router(String host, DumpFile logfile)
	{
		super(host,logfile);
		this.routeTable = new RouteTable();
		this.arpCache = new ArpCache();
	}
	
	/**
	 * @return routing table for the router
	 */
	public RouteTable getRouteTable()
	{ return this.routeTable; }
	
	/**
	 * Load a new routing table from a file.
	 * @param routeTableFile the name of the file containing the routing table
	 */
	public void loadRouteTable(String routeTableFile)
	{
		if (!routeTable.load(routeTableFile, this))
		{
			System.err.println("Error setting up routing table from file "
					+ routeTableFile);
			System.exit(1);
		}
		
		System.out.println("Loaded static route table");
		System.out.println("-------------------------------------------------");
		System.out.print(this.routeTable.toString());
		System.out.println("-------------------------------------------------");
	}
	
	/**
	 * Load a new ARP cache from a file.
	 * @param arpCacheFile the name of the file containing the ARP cache
	 */
	public void loadArpCache(String arpCacheFile)
	{
		if (!arpCache.load(arpCacheFile))
		{
			System.err.println("Error setting up ARP cache from file "
					+ arpCacheFile);
			System.exit(1);
		}
		
		System.out.println("Loaded static ARP cache");
		System.out.println("----------------------------------");
		System.out.print(this.arpCache.toString());
		System.out.println("----------------------------------");
	}

	/**
	 * Handle an Ethernet packet received on a specific interface.
	 * @param etherPacket the Ethernet packet that was received
	 * @param inIface the interface on which the packet was received
	 */
	public void handlePacket(Ethernet etherPacket, Iface inIface)
	{
		System.out.println("*** -> Received packet: " +
                etherPacket.toString().replace("\n", "\n\t"));
		
		/********************************************************************/
		/* TODO: Handle packets                                             */
		 
		if (etherPacket.getEtherType() != Ethernet.TYPE_IPv4){
			return;   //drop the packet if it is not IPv4
		} else {
			short newChecksum = 0;
			short oldChecksum = 0; 
			int accumulation = 0; 
			IPv4 packetIPv4 = (IPv4) etherPacket.getPayload(); 
			oldChecksum = packetIPv4.getChecksum(); 
			packetIPv4.setChecksum((short) 0); 
			byte[] data = new byte[packetIPv4.getTotalLength()];
		    ByteBuffer bb = ByteBuffer.wrap(data);

		    bb.put((byte) (((packetIPv4.getVersion() & 0xf) << 4) | (packetIPv4.getHeaderLength() & 0xf)));
		    bb.put(packetIPv4.getDiffServ());
		    bb.putShort(packetIPv4.getTotalLength());
		    bb.putShort(packetIPv4.getIdentification());
		    bb.putShort((short) (((packetIPv4.getFlags() & 0x7) << 13) | (packetIPv4.getFragmentOffset() & 0x1fff)));
		    bb.put(packetIPv4.getTtl());
		    bb.put(packetIPv4.getProtocol());
		    bb.putShort(packetIPv4.getChecksum());
		    bb.putInt(packetIPv4.getSourceAddress());
		    bb.putInt(packetIPv4.getDestinationAddress());
		    if (packetIPv4.getOptions() != null)
		    	bb.put(packetIPv4.getOptions());
		        
            for (int i = 0; i < packetIPv4.getHeaderLength() * 2; ++i) {
                accumulation += 0xffff & bb.getShort();
            }
            accumulation = ((accumulation >> 16) & 0xffff)
                    + (accumulation & 0xffff);
            newChecksum = (short) (~accumulation & 0xffff);
			
            if (newChecksum != oldChecksum){
            	return; 
            }else {
            	 int ttl = (int) packetIPv4.getTtl() -1 ;
            	 if (ttl > 0 ){
            		 packetIPv4.setTtl((byte) ttl); 
            		 if (this.interfaces.containsValue(packetIPv4.getDestinationAddress())){
            			 return; 
            		 } else {
            			RouteEntry routeFound = this.routeTable.lookup(packetIPv4.getDestinationAddress()); 
            			if ( routeFound != null){
            				etherPacket.setPayload(packetIPv4); 
            				etherPacket.setDestinationMACAddress(arpCache.lookup(routeFound.getDestinationAddress()).getMac().toBytes());
            				etherPacket.setSourceMACAddress(arpCache.lookup(routeFound.getGatewayAddress()).getMac().toBytes()); 
            				etherPacket.resetChecksum();
            				this.sendPacket(etherPacket, routeFound.getInterface()); 
            				return; 
            			}
            		 }
            		 
            	 } else {
            		 return; 
            	 }
            	
            	
            	
            }

			
		}
		
		/********************************************************************/
	}
}
