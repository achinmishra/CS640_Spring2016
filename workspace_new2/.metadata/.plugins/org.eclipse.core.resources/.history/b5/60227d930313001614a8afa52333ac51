package edu.wisc.cs.sdn.simpledns;

import java.net.*;
import java.io.*;
import edu.wisc.cs.sdn.simpledns.packet.*;
import java.util.*;

public class SimpleDNS {

	private final static int PACKETSIZE = 1500;
	private static String rootServer;


	public static void parseRequest(DNS dnsRequest, DatagramSocket socket, String nameServer)
	{
		if( dnsRequest.getOpcode() != 0 )
		{
                        System.out.println("Opcode wrong.");
                        return;
                }
		
		if( dnsRequest.getQuestions().size() != 1 )
		{
                        return;
                }

                short dnsType = dnsRequest.getQuestions().get(0).getType();

                if(dnsType != DNS.TYPE_A && dnsType != DNS.TYPE_AAAA && dnsType != DNS.TYPE_NS && dnsType != DNS.TYPE_CNAME )
		{
                        System.out.println("Invalid type of DNS request");
                        return;
                }
		
		try
		{
			int port = 53;
			System.out.println(port + ", " + nameServer);

			DatagramSocket newSocket = new DatagramSocket(port, InetAddress.getByName(nameServer));
			DatagramPacket packet = new DatagramPacket(new byte[PACKETSIZE], PACKETSIZE);
			packet.setAddress(InetAddress.getByName(nameServer));
			packet.setData(dnsRequest.serialize());
			newSocket.send(packet);

			//receive reply from nameServer = rootServer in first iteration 

			DatagramPacket replyPacket = new DatagramPacket( new byte[PACKETSIZE], PACKETSIZE );
			newSocket.receive(replyPacket);

			//parse response
			DNS dnsResponse = DNS.deserialize(replyPacket.getData(), replyPacket.getLength());

			List<DNSResourceRecord> answers = dnsResponse.getAnswers();
			List<DNSResourceRecord> authorities = dnsResponse.getAuthorities();
			List<DNSResourceRecord> aRecords = new LinkedList<DNSResourceRecord>();
			List<DNSResourceRecord> aaaaRecords = new LinkedList<DNSResourceRecord>();
			List<DNSResourceRecord> nsRecords = new LinkedList<DNSResourceRecord>();
			DNSResourceRecord cName = null;

			if( answers.size() >= 1 )
			{
				boolean createResponse;

				for(DNSResourceRecord current : answers)
				{
					short answerType = current.getType();
					switch(answerType)
					{
						case DNS.TYPE_A:  aRecords.add(current); break;
						case DNS.TYPE_AAAA: aaaaRecords.add(current); break;
						case DNS.TYPE_NS: nsRecords.add(current); break;
						case DNS.TYPE_CNAME: cName = current; break;
					};
				}

				createResponse = (dnsType == DNS.TYPE_A  && aRecords.size() >= 1) || (dnsType == DNS.TYPE_AAAA  && aaaaRecords.size() >= 1)
								|| (dnsType == DNS.TYPE_NS && nsRecords.size() >= 1) || (dnsType == DNS.TYPE_CNAME && cName != null);

				if(createResponse)
				{
					// create a new response, properly add the answers section (usually includes CNAME for no reason.)
					byte[] payload = dnsResponse.serialize();
					dnsResponse.setAnswers( new LinkedList<DNSResourceRecord>() );
					dnsResponse.setAuthorities( new LinkedList<DNSResourceRecord>() );

					// add answers
					if(dnsType == DNS.TYPE_A)
					{
						dnsResponse.setAnswers(aRecords);
					} else if (dnsType == DNS.TYPE_AAAA)
					{
						dnsResponse.setAnswers(aaaaRecords);
					} else if (dnsType == DNS.TYPE_NS)
					{
						dnsResponse.setAnswers(nsRecords);
					}       
					if (cName != null){
						dnsResponse.addAnswer(cName);
					}       

					socket.send(new DatagramPacket(payload, payload.length));
					return;

				} else 
				{
					// need to recurse on a given CNAME
					dnsRequest.getQuestions().get(0).setName(cName.getName());
					parseRequest(dnsRequest, socket, nameServer);
				}
			}
			if(authorities.size() >= 1)
                        {
                                //go for new name server and therefore adding third argument in parseRequest function
                                //edit it later
                                //parseRequest(dnsRequest, socket, ipAddressPlz( authorities.get(0).getName(), ROOTSERVER ) );






                                return;
                        }

		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
        
	public static void main(String[] args)
	{
		if( args.length != 4 )
		{
                        System.out.println( "java edu.wisc.cs.sdn.simpledns.SimpleDNS -r <root server ip: 198.41.0.4 > -e <ec2 csv>" );
                        return ;
                }
		rootServer = args[1];
		byte[] receiveData = new byte[PACKETSIZE];
		while(true)                
		{ 
			try
			{ 
				DatagramSocket serverSocket = new DatagramSocket(8053); 
				DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
				serverSocket.receive(receivePacket);
				DNS dnsPacket;
				dnsPacket = DNS.deserialize(receivePacket.getData(), receivePacket.getLength() );
				parseRequest(dnsPacket, serverSocket, rootServer);
			}
			catch (Exception e)
			{
				System.err.println("Exception:  " + e);
				e.printStackTrace();
			}

		}
	}
}

